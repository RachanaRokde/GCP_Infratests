{"name": "de0360-pkce-rubix-cl-dev000 - cdp-rubix-dev-eagle-m - CPU Overcommit Test Case", "status": "broken", "statusDetails": {"message": "AttributeError: Unknown field for Scheduling: min_cpu_platform", "trace": "self = <api_tests.test_rough.TestComputeEngine object at 0x112966610>\nproject_vm_instances = [('de0360-pkce-rubix-cl-dev000', ListPager<id: \"projects/de0360-pkce-rubix-cl-dev000/zones/europe-west3-a/instances\"\ni...f_link: \"https://www.googleapis.com/compute/v1/projects/de0360-pkce-rubix-cl-uat000/zones/europe-west3-a/instances\"\n>)]\n\n    @allure.story(\"Verify CPU Overcommit for every Compute Engine VM Resource\")\n    @pytest.mark.parametrize(\"project_vm_instances\", [(p[\"project_id\"],) for p in config[\"projects\"]], indirect=True)\n    def test_cpu_overcommit(self, project_vm_instances):\n        for project_id, instances in project_vm_instances:\n            if not instances:\n                continue\n    \n            print(f\"Running test for Project ID: {project_id}\")\n    \n            incorrect_cpu_overcommit_instances = []  # Instances with incorrect CPU Overcommit setting\n    \n            for instance in instances:\n                test_case_name = f\"{project_id} - {instance.name} - CPU Overcommit Test Case\"\n                allure.dynamic.title(test_case_name)\n    \n                assert_value = next(\n                    p[\"cpu_overcommit_assertion\"] for p in config[\"projects\"] if p[\"project_id\"] == project_id)\n>               cpu_overcommit = instance.scheduling.min_cpu_platform if instance.scheduling else None\n\napi_tests/test_rough.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = automatic_restart: true\non_host_maintenance: \"MIGRATE\"\npreemptible: false\nprovisioning_model: \"STANDARD\"\n, key = 'min_cpu_platform'\n\n    def __getattr__(self, key):\n        \"\"\"Retrieve the given field's value.\n    \n        In protocol buffers, the presence of a field on a message is\n        sufficient for it to always be \"present\".\n    \n        For primitives, a value of the correct type will always be returned\n        (the \"falsy\" values in protocol buffers consistently match those\n        in Python). For repeated fields, the falsy value is always an empty\n        sequence.\n    \n        For messages, protocol buffers does distinguish between an empty\n        message and absence, but this distinction is subtle and rarely\n        relevant. Therefore, this method always returns an empty message\n        (following the official implementation). To check for message\n        presence, use ``key in self`` (in other words, ``__contains__``).\n    \n        .. note::\n    \n            Some well-known protocol buffer types\n            (e.g. ``google.protobuf.Timestamp``) will be converted to\n            their Python equivalents. See the ``marshal`` module for\n            more details.\n        \"\"\"\n        (key, pb_type) = self._get_pb_type_from_key(key)\n        if pb_type is None:\n>           raise AttributeError(\n                \"Unknown field for {}: {}\".format(self.__class__.__name__, key)\n            )\nE           AttributeError: Unknown field for Scheduling: min_cpu_platform\n\n/opt/homebrew/lib/python3.11/site-packages/proto/message.py:747: AttributeError"}, "attachments": [{"name": "stdout", "source": "9683fa9a-bd5d-4a54-b84b-1856a65d339c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "project_vm_instances", "value": "('de0360-pkce-rubix-cl-dev000',)"}], "start": 1691138702080, "stop": 1691138702081, "uuid": "4247bb59-33cc-4924-9e04-25f0b0dc269c", "historyId": "31b486873576a827d608643a30abeb14", "testCaseId": "9e252814f80b6f7c6da1e1fe67ac0456", "fullName": "api_tests.test_rough.TestComputeEngine#test_cpu_overcommit", "labels": [{"name": "story", "value": "Verify CPU Overcommit for every Compute Engine VM Resource"}, {"name": "feature", "value": "Compute Engine"}, {"name": "parentSuite", "value": "api_tests"}, {"name": "suite", "value": "test_rough"}, {"name": "subSuite", "value": "TestComputeEngine"}, {"name": "host", "value": "192.168.1.11"}, {"name": "thread", "value": "20493-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "api_tests.test_rough"}]}